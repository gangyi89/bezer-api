# The AWSTemplateFormatVersion identifies the capabilities of the template

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  bezer-api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Parameter
Parameters:
  CognitoUserPoolArn:
    Type: String
    Default: arn:aws:cognito-idp:ap-southeast-1:177085036552:userpool/ap-southeast-1_ME7Urx1e3

#Globals
Globals:
  Function:
    Runtime: nodejs12.x
    Layers:
      - !Ref ApiDepLayer
    MemorySize: 128
    Timeout: 100

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # API resource
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type, Authorization'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              WWW-Authenticate: >-
                'Bearer realm="admin"'
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-items-get"]]
      Handler: src/handlers/items/get-all-items.getAllItemsHandler
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-items-get-id"]]
      Handler: src/handlers/items/get-by-id.getByIdHandler
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /{id}
            Method: GET
            Auth:
              Authorizer: NONE
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-items-put"]]
      Handler: src/handlers/items/put-item.putItemHandler
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: POST
            Auth:
              Authorizer: NONE

  # This is a Lambda function config associated with the source code: put-item.js
  postProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-projects-post"]]
      Handler: src/handlers/projects/post-project.postProjectHandler
      Description: A simple example includes a HTTP post method to add one project to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /projects
            Method: POST
  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-projects-get"]]
      Handler: src/handlers/projects/get-all-projects.getAllProjectsHandler
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /projects
            Method: GET
  # This is a Lambda function config associated with the source code: put-item.js
  deleteProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-projects-delete"]]
      Handler: src/handlers/projects/delete-project.deleteProjectHandler
      Description: A simple example includes a HTTP post method to add one project to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /projects/{id}
            Method: DELETE

  #get by id for projects
  getProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-projects-get-by-id"]]
      Handler: src/handlers/projects/get-project.getProjectHandler
      Description: A simple example includes a HTTP post method to add one project to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /projects/{id}
            Method: GET
            Auth:
              Authorizer: NONE

  # This is a Lambda function config associated with the source code: get-all-items.js
  joinSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-join-session"]]
      Handler: src/handlers/join/join-session.joinSessionHandler
      Description: User can join a session using this api
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref ProjectsTable
          USERS_TABLE: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /join
            Method: POST
            Auth:
              Authorizer: NONE
  # This is a Lambda function config associated with the source code: get-all-items.js
  postProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-post-profile"]]
      Handler: src/handlers/profile/post-profile.postProfileHandler
      Description: initialise profile of user
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfilesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DemographicsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          PROFILES_TABLE: !Ref ProfilesTable
          DEMOGRAPHICS_TABLE: !Ref DemographicsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /profiles
            Method: POST
            Auth:
              Authorizer: NONE
    # This is a Lambda function config associated with the source code: get-all-items.js
  getProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [!Ref AWS::StackName, "-get-profile"]]
      Handler: src/handlers/profile/get-profile.getProfileHandler
      Description: get profile of user
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfilesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          PROFILES_TABLE: !Ref ProfilesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /profiles/{id}
            Method: GET
            Auth:
              Authorizer: NONE

  #Dependencies via layers
  ApiDepLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: api-dependencies
      Description: Dependencies for apis
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Join ["", [!Ref AWS::StackName, "-sample"]]
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["", [!Ref AWS::StackName, "-projects1"]]
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "date"
          AttributeType: "S"
        - AttributeName: "accessCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "userId"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "userIdIndex"
          KeySchema:
            - AttributeName: "userId"
              KeyType: "HASH"
            - AttributeName: "date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        - IndexName: "accessCodeIndex"
          KeySchema:
            - AttributeName: "accessCode"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  #users table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["", [!Ref AWS::StackName, "-users"]]
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "accessCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "accessCode"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "accessCodeIndex"
          KeySchema:
            - AttributeName: "accessCode"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  # table for user profile
  ProfilesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Join ["", [!Ref AWS::StackName, "-profiles"]]
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  # table for user profile
  DemographicsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Join ["", [!Ref AWS::StackName, "-demographics"]]
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
